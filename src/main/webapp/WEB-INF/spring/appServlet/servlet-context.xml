<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 
	SpringMVC로 요청이 들어오면 제일먼저 DispatcherServlet이 요청을 받는다.
	그리고 아래 설정된 기본패키지를 검색(scan) 한 후 @Controller 어노테이션이 설정된 클래스의 요청명이 매핑된 메소드를 찾아 실행한다.
	 -->
	<context:component-scan base-package="com.kosmo.k10spring" />

	<!-- 
	Spring Framework에서 이미지나 js, css파일등의 리소스를 사용하기 위해 생성된 폴더이다.
		views폴더 하위에는 jsp만 생성해야하고 모든 리소스 파일은 여기에 저장해야 한다.
	 -->
	<resources mapping="/res/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />
	<resources mapping="/common/**" location="/resources/" />

	<!-- 
		컨트롤러에서 비즈니스로직을 수행한 후 View의 경로를 반환하면 ViewResolver가 해당 뷰의 경로를 아래와 같이 조립한다.
		[prefix]    				 [suffix]
		/WEB-INF/views/ + 컨트롤러 반환값 + .jsp
		이와같이 조립한 후 웹브라우저에 해당 View를 로드한다.
		컨트롤러에서는 View를 호출하기 전 출력할 내용을 Model객체에 저장한다.
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	
	
</beans:beans>
